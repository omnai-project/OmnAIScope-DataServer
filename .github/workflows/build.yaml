name: Build-Linux-Binary

on:
  push:
    tags:
      - 'v*'               

permissions:
  actions: read

jobs:
  build-linux:
    strategy:
      matrix:
        ubuntu-image: [ubuntu-20.04, ubuntu-22.04, ubuntu-24.04]

    runs-on: ${{ matrix.ubuntu-image }}

    steps:
    # -----------------------------------------------------  SSH f체r private Submodule
    - name: Set up SSH for private submodules
      run: |
        install -d -m 700 ~/.ssh
        printf '%s\n' "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ssh-keyscan github.com >> ~/.ssh/known_hosts

    # -----------------------------------------------------  Checkout (rekursiv)
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive
        ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}

    # -----------------------------------------------------  System-Pakete + GCC 13 (dynamisch)
    - name: Install build dependencies
      run: |
        sudo apt-get update -qq

        # GCC 13 ist schon Standard auf 24.04; f체r 20.04 und 22.04 holen wir das Toolchain-PPAs.
        if [[ "${{ matrix.ubuntu-image }}" != "ubuntu-24.04" ]]; then
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt-get update -qq
        fi

        sudo apt-get install -y --no-install-recommends \
             build-essential cmake ninja-build autoconf automake autoconf-archive \
             libudev-dev pkg-config gcc-13 g++-13

        # GCC 13 als Standard w채hlen (체berschreibt eventuelle 9/11-Defaults)
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 100 \
                                 --slave   /usr/bin/g++ g++ /usr/bin/g++-13

        gcc --version   # Debug-Ausgabe
        g++ --version

    # -----------------------------------------------------  Configure + Build (Release)
    - name: Configure (Release)
      run: |
        cmake -S . -B build -G Ninja \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake"

    - name: Build
      run: cmake --build build --parallel

    - name: Strip binary
      run: strip build/OmnAIScopeBackend || true

    # -----------------------------------------------------  Artefakt hochladen
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: OmnAIScopeBackend-${{ matrix.ubuntu-image }}-${{ github.ref_name }}
        path: build/OmnAIScopeBackend

